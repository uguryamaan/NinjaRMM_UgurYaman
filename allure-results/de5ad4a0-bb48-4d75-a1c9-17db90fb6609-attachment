# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify Unsuccessful Login with Invalid Password
- Location: C:\Users\User\Desktop\ninjarmugu\tests\test-6.spec.ts:33:1

# Error details

```
Error: Timed out 10000ms waiting for expect(locator).toBeVisible()

Locator: getByText('Invalid username/password.')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 10000ms
  - waiting for getByText('Invalid username/password.')

    at C:\Users\User\Desktop\ninjarmugu\tests\test-6.spec.ts:53:32
```

# Page snapshot

```yaml
- link "logo":
  - img "logo"
- heading [level=2]
- text: Human verification failed. Please try again or contact your system administrator for assistance. Email
- textbox: ugur.yamaan@gmail.com
- text: Password
- textbox: Atf1fbtNrL31M4f
- checkbox "Keep me signed in"
- text: Keep me signed in
- button "Sign In"
- link "Forgot your password?"
- link "Do not have an account?"
- text: NinjaOne LLC © 2014-2025
- link "Contact us"
- dialog
- dialog
- dialog
- dialog
```

# Test source

```ts
   1 | import { test, expect } from '../fixtures/ui-fixture';
   2 | import DataManager from '../env/dataManager';
   3 |
   4 | test('Verify Unsuccessful Login with Invalid Username', async ({ pageManager }) => {
   5 |     // 1. Login sayfasına git
   6 |     await pageManager.getLoginPage().loadPage();
   7 |     await expect(pageManager.getLoginPage().getLoginForm()).toBeVisible();
   8 |
   9 |     // 2. Geçersiz email ve geçerli password gir
  10 |     const loginBody = DataManager.testData.getFakeLoginBody();
  11 |     console.log('Login attempt with invalid email:', loginBody.getEmail());
  12 |     await pageManager.getLoginPage().fillLoginForm(loginBody);
  13 |
  14 |     // 3. "Sign In" butonuna tıkla
  15 |     await pageManager.getLoginPage().clickSignInButton();
  16 |
  17 |     // 4. Sayfa yüklenmesini bekle
  18 |     await pageManager.getPage().waitForLoadState('networkidle');
  19 |
  20 |     // 5. Hata mesajının görünür olduğunu kontrol et
  21 |     const errorMessage = pageManager.getLoginPage().getInvalidEmailPassWarningText();
  22 |     await expect(errorMessage).toBeVisible();
  23 |     
  24 |     // 6. Hata mesajının doğru olduğunu kontrol et
  25 |     const errorText = await errorMessage.textContent();
  26 |     expect(errorText).toContain('Invalid username/password');
  27 |
  28 |     // 7. Kullanıcının hala login sayfasında olduğunu kontrol et
  29 |     const currentUrl = await pageManager.getLoginPage().getCurrentUrl();
  30 |     expect(currentUrl).toContain(DataManager.resources.LOGIN_URL);
  31 | });
  32 |
  33 | test('Verify Unsuccessful Login with Invalid Password', async ({ pageManager }) => {
  34 |     // 1. Login sayfasına git
  35 |     await pageManager.getLoginPage().loadPage();
  36 |     await expect(pageManager.getLoginPage().getLoginForm()).toBeVisible();
  37 |
  38 |     // 2. Geçerli email ve geçersiz password gir
  39 |     const validEmail = DataManager.testData.getValidLoginBody().getEmail();
  40 |     const invalidPassword = DataManager.testData.getFakeLoginBody().getPassword();
  41 |     await pageManager.getLoginPage().getEmailInput().fill(validEmail);
  42 |     await pageManager.getLoginPage().getPasswordInput().fill(invalidPassword);
  43 |     console.log('Login attempt with valid email:', validEmail);
  44 |
  45 |     // 3. "Sign In" butonuna tıkla
  46 |     await pageManager.getLoginPage().clickSignInButton();
  47 |
  48 |     // 4. Sayfa yüklenmesini bekle
  49 |     await pageManager.getPage().waitForLoadState('networkidle');
  50 |
  51 |     // 5. Hata mesajının görünür olduğunu kontrol et
  52 |     const errorMessage = pageManager.getLoginPage().getInvalidEmailPassWarningText();
> 53 |     await expect(errorMessage).toBeVisible();
     |                                ^ Error: Timed out 10000ms waiting for expect(locator).toBeVisible()
  54 |     
  55 |     // 6. Hata mesajının doğru olduğunu kontrol et
  56 |     const errorText = await errorMessage.textContent();
  57 |     expect(errorText).toContain('Invalid username/password');
  58 |
  59 |     // 7. Kullanıcının hala login sayfasında olduğunu kontrol et
  60 |     const currentUrl = await pageManager.getLoginPage().getCurrentUrl();
  61 |     expect(currentUrl).toContain(DataManager.resources.LOGIN_URL);
  62 | });
```